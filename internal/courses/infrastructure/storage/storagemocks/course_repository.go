// Code generated by mockery v2.39.1. DO NOT EDIT.

package storagemocks

import (
	domain "app-services-go/internal/courses/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CourseRepository is an autogenerated mock type for the CourseRepository type
type CourseRepository struct {
	mock.Mock
}

// FetchById provides a mock function with given fields: ctx, id
func (_m *CourseRepository) FetchById(ctx context.Context, id string) (domain.Course, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FetchById")
	}

	var r0 domain.Course
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Course, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Course); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Course)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, course
func (_m *CourseRepository) Save(ctx context.Context, course domain.Course) error {
	ret := _m.Called(ctx, course)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Course) error); ok {
		r0 = rf(ctx, course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCourseRepository creates a new instance of CourseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCourseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CourseRepository {
	mock := &CourseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
